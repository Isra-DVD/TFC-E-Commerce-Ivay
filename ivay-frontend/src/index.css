/* :root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
 */

/* src/index.css */

/* 1. Set up full height for html, body, and the React root element */
html,
body,
#root {
  height: 100%;
  margin: 0;
  padding: 0;
}

/* 2. Apply a consistent box model */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* 3. Basic body defaults - MUI's CssBaseline will handle more */
body {
  /*
    MUI's ThemeProvider and CssBaseline will largely control the
    background color and font-family. You can set fallbacks here if desired.
    background-color: #f5f5f5;
  */
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  /* Common system font stack, MUI will override with Roboto by default */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/*
   Remove or comment out the Vite default :root theming if you're primarily using MUI's theme.
   MUI's <CssBaseline /> component and ThemeProvider are designed to manage this.
   If you want to keep some aspects, be very careful about conflicts.
*/
/*
:root {
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
}
*/

/*
  You can keep global styles for 'a', 'h1', 'button' if you want them
  to be the absolute base before MUI styling, but be aware that MUI
  components will often override these. It's generally cleaner to style
  these elements through the MUI theme or specifically for non-MUI parts
  of your app.
*/

/* Example: If you want to keep some Vite default link styling as a base */
/*
a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}
@media (prefers-color-scheme: light) {
  a:hover {
    color: #747bff;
  }
}
*/

/* Remove default Vite button styling if using MUI Buttons primarily */
/*
button {
  // ... Vite default button styles ...
}
*/